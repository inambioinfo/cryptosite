import sys, glob
import numpy as np
import os
import random


tt = '/scrapp/AM/'+sys.argv[-2] #random filename generated by backend
chainid = sys.argv[-1]
T = np.array([300,350,400,450,500])
pdbs = os.listdir(tt + '/pred_dECALCrAS1000')
pdbs = [i.split('.')[0] for i in pdbs if '_' in i and 'pdb' in i]
pdbs = list(set(pdbs))

for pdb in pdbs:
	efiles = glob.glob(tt + '/pred_dECALCrAS1000/'+pdb+'*/energy.dat')
	QM,QD = {},{}
	PM,PD,PM5,PD5,PMs,PDs,Len ={}, {},{},{},{},{},{}
	AM = {}
	print tt + '/pred_dECALCrAS1000/'+pdb+'*/energy.dat'
	for e in efiles:
		pdbf = e.rsplit('/',2)[1]
		#pdb = pdbf.split('_')[0]
		
		# --- read energy file and determine the temperature
		data = open(e)
		D = data.readlines()
		data.close()
		E = [float(i.strip().split()[-1]) for i in D]
		temp = T[np.argmin(np.abs(T-np.mean(E)))]
		if temp not in QM:
			QM[temp] = []
			QD[temp] = []
			PM[temp] = []
			PD[temp] = []
			PM5[temp]= []
			PD5[temp]= []
			PMs[temp]= []	
			AM[temp] = {'sas14':{},'sas30':{},'prt':{},'cvx':{}}

		# --- read in Qi
		try:
			data = open(e.rsplit('/',1)[0]+'/qioft_pm_'+pdb+'.pdb_11sc.dat')
			D = data.readlines()
			data.close()
			q = []
			#for d in D: Q[temp].append( np.array([float(i) for i in d.strip().split()]) )
			if len(D)>0 and 'THEORETICAL' not in D[0]:
				for d in D: q.append( np.array([float(i) for i in d.strip().split()]) )
				q = np.array(q)
				QM[temp].append( np.mean(q,axis=0) )
				QD[temp].append( np.std(q,axis=0) )
		except (IOError, ValueError): pass
		
		# --- read in pockets
		try:
			data = open(e.rsplit('/',1)[0]+'/pockets.out')
			D = data.readlines()
			data.close()
			p = []
			Res = []
			for d in D[1:]:
				d = d.strip().split()
				p.append( np.array([float(i) for i in d[2:]]) )
				Res.append((d[0],int(d[1])))
			
			p = np.array(p)
			PM[temp].append( np.mean(p,axis=1) )
			PD[temp].append( np.std(p,axis=1) )
			PMs[temp].append( (p>=0.4).sum(axis=1) / float(np.shape(p)[1]) )
			percentile = int(round(len(Res)*0.05,0))
			PM5[temp].append( np.sort(p,axis=1)[:,-percentile:].mean(axis=1) )
			PD5[temp].append( np.sort(p,axis=1)[:,-percentile:].std(axis=1) )
		except (IOError, ValueError): pass

		# --- read in geometry
		files = glob.glob(tt+'/frust/'+pdbf+'/*.feat')
		if len(files)==0: continue
		if len(files)>500: files = random.sample(files,500)
		print pdbf,pdb,temp,percentile,len(files)	
		for fil in files:
			data = open(fil)
			D = data.readlines()
			data.close()
			
			#print pdbf,fil
			for d in D:
				d = d.strip().split()
				try: res = (d[0],int(d[1]))
				except (IndexError, ValueError): continue
				if res not in AM[temp]['sas14']:
					try:
						AM[temp]['sas14'][res] = [float(d[2])]
						AM[temp]['sas30'][res] = [float(d[3])]
						AM[temp]['prt'][res]   = [float(d[4])]
						AM[temp]['cvx'][res]   = [float(d[5])]
					except (IndexError, ValueError): pass
				else:
					try:
						AM[temp]['sas14'][res].append(float(d[2]))
						AM[temp]['sas30'][res].append(float(d[3]))
						AM[temp]['prt'][res].append(float(d[4]))
						AM[temp]['cvx'][res].append(float(d[5]))
					except IndexError: pass
		
		#print pdbf,pdb,temp,percentile,len(files)
	
	for t in T:
		qm = np.array(QM[t])
		qd = np.array(QD[t])
		pm = np.array(PM[t])
		pd = np.array(PD[t])
		pm5= np.array(PM5[t])
		pd5= np.array(PD5[t])
		pms= np.array(PMs[t])

		qm = np.mean(qm, axis=0)
		qd = np.mean(qd, axis=0)
		pm = np.mean(pm, axis=0)
		pd = np.mean(pd, axis=0)
		pm5= np.mean(pm5,axis=0)
		pd5= np.mean(pd5,axis=0)
		pms= np.mean(pms,axis=0)

		sas14m, sas14d = [],[]
		sas30m, sas30d = [],[]
		prtm, prtd = [],[]
		cvxm, cvxd = [],[]

		out = open(pdb+'_'+str(t)+'.am','w')
		print Res
		for res in Res: 
			L = [ res[0],res[1],np.mean(AM[t]['sas14'][res]),np.std(AM[t]['sas14'][res])]
			L +=[np.mean(AM[t]['sas30'][res]),np.std(AM[t]['sas30'][res])]  
			L +=[np.mean(AM[t]['prt'][res]),np.std(AM[t]['prt'][res])]
			L +=[np.mean(AM[t]['cvx'][res]),np.std(AM[t]['cvx'][res])]
			L +=[qm[res[1]-1], qd[res[1]-1], pm[res[1]-1], pd[res[1]-1]]
			L +=[pm5[res[1]-1], pd5[res[1]-1], pms[res[1]-1]]
			out.write('\t'.join([str(i) for i in L])+'\n')
			#print len(L), L
		out.close()
		print np.shape(qm), np.shape(qd), np.shape(pm), np.shape(pd),np.shape(pm5),np.shape(pms) ,pdb,t
	
	
	
### --- create the final file with all the features
import pickle, glob, os

#out = open('1LAYA2.features','w')
Header = ['ApoID', 'Res', 'ResID', 'SAS', 'PRT', 'CVX', 'CNC', 'SSE', 'HYD', 'CHR', 'SQC', 'PCK', 'D2S', 'BFC', 'NBG', 'SASn', 'PRTn', 'CVXn', 'CNCn', 'Un', 'Bn', 'En', 'Gn', 'Hn', 'Sn', 'Tn', 'In', 'HYDn', 'CHRn', 'SQCn', 'PCKn', 'BFCn', 'SAS14_mean_300', 'SAS14_std_300', 'SAS30_mean_300', 'SAS30_std_300', 'PRT_mean_300', 'PRT_std_300', 'CVX_mean_300', 'CVX_std_300', 'QI_mean_300', 'QI_std_300', 'CNC_mean_300', 'CNC_std_300', 'CN5_mean_300', 'CN5_std_300', 'CNS_300', 'SAS14_mean_350', 'SAS14_std_350', 'SAS30_mean_350', 'SAS30_std_350', 'PRT_mean_350', 'PRT_std_350', 'CVX_mean_350', 'CVX_std_350', 'QI_mean_350', 'QI_std_350', 'CNC_mean_350', 'CNC_std_350', 'CN5_mean_350', 'CN5_std_350', 'CNS_350', 'SAS14_mean_400', 'SAS14_std_400', 'SAS30_mean_400', 'SAS30_std_400', 'PRT_mean_400', 'PRT_std_400', 'CVX_mean_400', 'CVX_std_400', 'QI_mean_400', 'QI_std_400', 'CNC_mean_400', 'CNC_std_400', 'CN5_mean_400', 'CN5_std_400', 'CNS_400', 'SAS14_mean_450', 'SAS14_std_450', 'SAS30_mean_450', 'SAS30_std_450', 'PRT_mean_450', 'PRT_std_450', 'CVX_mean_450', 'CVX_std_450', 'QI_mean_450', 'QI_std_450', 'CNC_mean_450', 'CNC_std_450', 'CN5_mean_450', 'CN5_std_450', 'CNS_450', 'SAS14_mean_500', 'SAS14_std_500', 'SAS30_mean_500', 'SAS30_std_500', 'PRT_mean_500', 'PRT_std_500', 'CVX_mean_500', 'CVX_std_500', 'QI_mean_500', 'QI_std_500', 'CNC_mean_500', 'CNC_std_500', 'CN5_mean_500', 'CN5_std_500', 'CNS_500', 'CBS']
#out.write('\t'.join(Header)+'\n')


files = glob.glob('*.am')
pdbs = set([i.split('_')[0].split('/')[-1] for i in files])
for a in pdbs: #if 1:

        #a = '1LAYA2'
        fff = a
        data = open(fff+chainid+'.bmiftr')
        D = data.readlines()
        data.close()

        out = open('%s.features' % (fff+chainid,),'w')
        out.write('\t'.join(Header)+'\n')


        H = D[0].strip().split()
        A = {}
        for d in D[1:]:
                d = d.strip().split()
                A[(d[1],int(d[2]))] = d


        for t in ['300','350','400','450','500']:
                data = open('%s_%s.am' % (fff,t))
                D = data.readlines()
                data.close()

                H += ['SAS14_mean_'+t,'SAS14_std_'+t,'SAS30_mean_'+t,'SAS30_std_'+t,'PRT_mean_'+t,'PRT_std_'+t]
                H += ['CVX_mean_'+t,'CVX_std_'+t,'QI_mean_'+t,'QI_std_'+t,'CNC_mean_'+t,'CNC_std_'+t]
                H += ['CN5_mean_'+t,'CN5_std_'+t,'CNS_'+t]

                for d in D:
                        d = d.strip().split()
                        A[(d[0],int(d[1]))] += d[2:]

        for i in A:
                out.write('\t'.join(A[i]+['0'])+'\n')
        H += ['CBS']
        out.close()

print H, len(H)


	
