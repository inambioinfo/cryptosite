<?xml version="1.0"?>
<ChimeraPuppet type="std_webdata">
<py_cmd>
<![CDATA[

def open_files(pdb_url, features_url):
	"""Open PDB file and add feature attributes."""
	with URLFile(pdb_url) as pdb:
		m = open_pdb(pdb)
	with URLFile(features_url) as features:
		headers = add_features(m, features)
	CrypticSiteDialog(m, headers)

class URLFile(object):
	"""Class to download URL into a local file.

	Designed for use in a "with" statement, an instance will
	download the URL into a local file using urllib.urlretrieve
	and return the name of the temporary file.  On exit, the
	temporary file is deleted to minimize clutter."""

	def __init__(self, url):
		self.url = url
		self.filename = None
		self.f = None

	def __enter__(self):
		# Called when entering a "with" statement
		import urllib
		self.filename, headers = urllib.urlretrieve(self.url)
		return self.filename

	def __exit__(self, type, value, traceback):
		# Called when leaving a "with" statement
		if self.filename:
			import os
			try:
				os.remove(self.filename)
			except:
				pass
			self.filename = None

def open_pdb(filename):
	"""Open chimera model from filename."""
	import chimera
	models = chimera.openModels.open(filename, type="PDB")
	return models[0]

def add_features(m, filename):
	"""Add feature attributes from file to model."""
	# Create a mapping from residue position to residue so
	# that we can easily go from ResId to chimera residue later
	res_map = dict([ (r.id.position, r) for r in m.residues ])
	with open(filename) as f:
		# Take the header line
		# Remove the newline character at the end
		# Split on tabs
		# Make mapping from index to name and vice versa
		labels = f.readline()[:-1].split('\t')
		amap = list()
		headers = list()
		id_index = None
		for index, name in enumerate(labels):
			if name == "ResID":
				id_index = index
			elif name == "ApoID" or name == "Res":
				# Don't bother adding these as attributes
				pass
			else:
				headers.append(name)
				amap.append((index, "cryptic_" + name))
		if id_index is None:
			raise ValueError("No residue ID column found")
		for line in f:
			values = line[:-1].split('\t')
			try:
				r = res_map[int(values[id_index])]
			except KeyError:
				# Skip lines with ResID that do not have
				# corresponding residues in PDB file
				continue
			for index, name in amap:
				setattr(r, name, value(values[index]))
		return headers

def value(s):
	"""Convert string value to number if compatible."""
	try:
		return int(s)
	except ValueError:
		try:
			return float(s)
		except ValueError:
			return s

#
# This is an example of creating a Chimera dialog with a matplotlib plot.
# I also included some code that shows the feature data in a table.
# The code for using the Pmw.ScrolledText came straight out of the
# Pmw reference manual.  I left TODO markers where you will need to
# drop in your plotting code.
#
# "selectionChangedCB" is the method that gets called whenever the
# selection changes in Chimera.  In this method, you can see how the
# currently selected residues are fetched and how the position (ResID)
# and other attributes are accessed.  In "add_features" above, we
# created residue attributes by prepending "cryptic_" to all the
# header names (which all happen to # be valid Python identifiers!)
# so that we don't accidentally clobber someone else's attributes;
# so in "selectionChangedCB", we accessed the attributes the same
# way.
#
from chimera.mplDialog import MPLDialog
class CrypticSiteDialog(MPLDialog):

	def __init__(self, m, headers):
		# Squirrel away our information
		self.mol = m
		self.headers = headers

		# Color residues by score (bfactor in atoms)
		# We first copy the score to the residue so
		# that we have it under the "correct" name
		for r in m.residues:
			r.cryptic_score = r.atoms[0].bfactor
		self.colorByScore()

		# Set dialog parameters and initialize
		self.title = "Cryptic Site Features for %s" % m.name
		MPLDialog.__init__(self)

		# Create matplotlib plot, which actually is an Axes instance
		self.subplot = self.add_subplot(1, 1, 1)

		# Ask Chimera to notify us when selection changes
		from chimera import triggers
		self._selHandler = triggers.addHandler("selection changed",
						self.selectionChangedCB, None)

	def colorByScore(self):
		# Color residues and atoms by score
		# Scores between 0 to 10 are interpolated between
		# blue and white; scores 10 and above are interpolated
		# from white to red (red = maximum score found)
		import chimera
		maxScore = max([ r.cryptic_score for r in self.mol.residues ])
		m10 = maxScore - 10
		colorCache = dict()
		for r in self.mol.residues:
			if r.cryptic_score <= 10:
				v = r.cryptic_score / 10
				rgb = (v, v, 1.0)
			else:
				v = 1.0 - (r.cryptic_score - 10) / m10
				rgb = (1.0, v, v)
			c = colorCache.get(rgb, None)
			if c is None:
				c = chimera.MaterialColor(*rgb)
				colorCache[rgb] = c
			r.ribbonColor = c
			for a in r.atoms:
				a.color = c
				a.labelColor = c
				a.vdwColor = c
				a.surfaceColor = c

	def fillInUI(self, parent):
		# Called as part of initialization.

		# First we create a scrollable text widget for
		# displaying feature data in tabular format.
		# You can feel free to get rid of everything having
		# to do with "self.st" (st = ScrolledText).
		import Pmw
		fixedFont = Pmw.logicalfont("Courier")
		self.st = Pmw.ScrolledText(parent,
					labelpos="n",
					label_text="Features Table",
					columnheader=1,
					rowheader=1,
					rowcolumnheader=1,
					usehullsize=1,
					hull_width=400,
					hull_height=300,
					text_wrap="none",
					text_font=fixedFont,
					Header_font=fixedFont,
					Header_foreground="blue",
					rowheader_width=3,
					rowcolumnheader_width=3,
					text_padx=4,
					text_pady=4,
					Header_padx=4,
					rowheader_pady=4)
		self.st.pack(padx=5, pady=5, fill="both", expand=False)
		self.st.component("rowcolumnheader").insert("end", "Res")
		self.maxWidth = max([ len(h) for h in self.headers ]) + 1
		headerLine = "   ".join([ "%*s" % (self.maxWidth, h) for h in self.headers ])
		print "Header length", len(headerLine)
		self.st.component("columnheader").insert("0.0", headerLine)
		self.st.tag_configure("yellow", background="yellow")
		self.st.configure(text_state="disabled",
					Header_state="disabled")

		# Now we create a frame in which the matplotlib
		# widget will be placed, and then we get MPLDialog
		# to create the widget.
		import Tkinter
		f = Tkinter.Frame(parent)
		f.pack(fill="both", expand=True)
		MPLDialog.fillInUI(self, f)

	def selectionChangedCB(self, trigger, userData, triggerData):
		# Called whenever Chimera selection changes.

		# Grab the currently selected residues
		from chimera import selection
		residues = selection.currentResidues()

		# Clear out the text from the previous selection
		rowheader = self.st.component("rowheader")
		self.st.configure(text_state="normal",
					Header_state="normal")
		self.st.delete("1.0", "end")
		rowheader.delete("1.0", "end")

		# Loop through the selected residues sorted by sequence number
		ResidueValues = []
		for p, r in sorted([ (r.id.position, r) for r in residues ]):

			# Get values corresponding to headers.
			# If a value is missing (which probably
			# cannot happen), we leave it blank.
			values = list()
			for h in self.headers:
				try:
					v = getattr(r, "cryptic_" + h)
				except AttributeError:
					v = " " * self.maxWidth
				else:
					if isinstance(v, float):
						v = "%*.3f" % (self.maxWidth, v)
					elif isinstance(v, int):
						v = "%*d" % (self.maxWidth, v)
					else:
						v = "%*s" % (self.maxWidth, str(v))
				values.append(v)
			ResidueValues.append(values)

			# Fill in the row header and data
			dataLine = "   ".join(values) + "\n"
			print "Data length", len(dataLine)
			self.st.insert("end",  dataLine)
			rowheader.insert("end", "%-3d\n" % r.id.position)
		self.st.configure(text_state="disabled",
					Header_state="disabled")

		# Update matplotlib content
		self.updatePlot(residues, ResidueValues)

	def updatePlot(self, residues, ResidueValues):
		# Update plot with data from "residues"
		if len(residues) != len(ResidueValues):
			print "SelectionMismatchError"
			raise

		# Clear old data from plot
		ax = self.subplot
		ax.clear()

		L = len(residues)
		if L>0:
			resnum = 0.
			barwidth = 0.8/L
			colors = ['black','grey']*100
			colors = colors[:(len(self.headers)-2)]
			for x, res in enumerate(sorted([ (r.id.position, r) for r in residues ])):
				p, r = res
				values = [float(j) for j in ResidueValues[x][1:]]
				X = [i+resnum*barwidth for i in range(len(self.headers)-1)]
				p = ax.bar( X, values, width = 0.9*barwidth, \
					color = colors+['red'], lw=0., label=str(p)  )
				resnum += 1
			ax.legend()
			ax.set_xticks( [i+0.4 for i in range(len(self.headers)-1)] )
			ax.set_xticklabels( self.headers[1:], fontsize=10, rotation=75 )
			#self.tight_layout()
		else: pass
		self.draw()

# "base" refers to the URL from which to fetch data
#base = "http://www.cgl.ucsf.edu/home/conrad/cryptic/"
# Open files and display widget.
# TODO: The line below is the one that the CGI script would need to
# generate based on which entry is being fetched.
#open_files(base + "3UWPA.pol.pred.pdb", base + "3UWPA.features")

